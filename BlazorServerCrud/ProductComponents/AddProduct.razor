@inject ProductServices _productServices;
<div class="overlay">
    <div class="edit-form">
        <h3>Add Product</h3>
        <div class="form-group">
            <label for="productName">Product Name</label>
            <input type="text" class="form-control" id="productName" @bind="_productName" />
        </div>
        <div class="form-group">
            <label for="productPrice">Product Price</label>
            <input type="number" class="form-control" id="productPrice" @bind="_productPrice" />
        </div>
        <button class="btn btn-success" @onclick="AddProductAsync">Add</button>
        <button class="btn btn-close" @onclick="CloseOverlayAsync"></button>
    </div>
</div>
@code {
    public string? _productName;
    public string? _productPrice;

    [Parameter]
    public bool IsOverLayVisible { get; set; }
    [Parameter]
    public EventCallback<bool> IsOverLayVisibleChanged { get; set; }
    [Parameter]
    public EventCallback<Product> ProductAdded { get; set; }

    public async Task AddProductAsync()
    {
        try
        {
            var newProduct = new Product { Name = _productName!, Price = decimal.Parse(_productPrice!) };
            var product = await _productServices.AddProductAsync(newProduct);
            await ProductAdded.InvokeAsync(product);
            await IsOverLayVisibleChanged.InvokeAsync(false);
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }

    }
    public async Task CloseOverlayAsync()
    {

        try
        {
            await IsOverLayVisibleChanged.InvokeAsync(false);
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }

    }
}
}
