@inject ProductServices _productServices;
<div class="overlay">
    <div class="edit-form">
        <h3>Edit Product</h3>
        <div class="form-group">
            <label for="productName">Product Name</label>
            <input type="text" class="form-control" id="productName" @bind="@Product.Name"/>
        </div>
         <div class="form-group">
            <label for="productPrice">Product Price</label>
            <input type="number" class="form-control" id="productPrice" @bind="@Product.Price"/>
        </div>
        <button class="btn btn-success" @onclick="SaveProductAsync">Update</button>
        <button class="btn btn-close" @onclick="CloseOverlayAsync"></button>
    </div>
</div>
@code {
    [Parameter]
    public required Product Product { get; set; }
    [Parameter]
    public bool IsOverLayVisible { get; set; }
    [Parameter]
    public EventCallback<bool> IsOverLayVisibleChanged { get; set; }

    public async Task SaveProductAsync()
    {
        try
        {
            var updated = _productServices.UpdateProductAsync(Product);
            if(updated is not null)
            {
                await IsOverLayVisibleChanged.InvokeAsync(false);
            }
            else
            {
                Console.WriteLine("update failed");
            }
        }
        catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }

    }
    public async Task CloseOverlayAsync()
    {

        try
        {
          await IsOverLayVisibleChanged.InvokeAsync(false);
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }

    }
}
}
